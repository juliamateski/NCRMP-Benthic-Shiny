"0","server <- function(input, output) {"
"0","  "
"0","  output$coral_plot <- renderPlot({"
"0","    "
"0","    selected_region <- input$coral_region"
"0","    selected_year <- as.character(input$coral_year)"
"0","    species_list <- input$coral_species"
"0","  "
"0","    "
"0","    if (selected_region == ""Dry Tortugas"") {"
"0","      "
"0","      Tort_weightedmeans <- NCRMP_Tort_Occ_Den_CV"
"0","      #, YEAR == max(NCRMP_Tort_Occ_Den_CV$YEAR)) "
"0"," "
"0","      om <- NCRMP_DRM_calculate_mortality(region = ""Tortugas"", project = ""NCRMP_DRM"")"
"0","      Tort_om_spp <- om$Domain_est_old_mort_species"
"0","      Tort_rm_spp <- om$Domain_est_rec_mort_species"
"0","  "
"0","      s <- NCRMP_DRM_calculate_mean_colony_size(region = ""Tortugas"", project = ""NCRMP_DRM"")"
"0","      Tort_s_spp <- s$Domain_est_species"
"0","      "
"0","      generateCoralPlot(""Dry Tortugas"", selected_year, Tort_weightedmeans,Tort_om_spp, Tort_s_spp, Tort_rm_spp, species_list)"
"0","    }"
"0","    "
"0","    "
"0","    else if (selected_region == ""Southeast Florida"") {"
"0","  SEFL_weightedmeans <- NCRMP_DRM_SEFCRI_Occ_Den_CV"
"0","    #filter(YEAR == max(YEAR, na.rm = TRUE))"
"0","  "
"0","  om <- NCRMP_DRM_calculate_mortality(region = ""SEFCRI"", project = ""NCRMP_DRM"")"
"0","  SEFL_om_spp <- om$Domain_est_old_mort_species"
"0","  SEFL_rm_spp <- om$Domain_est_rec_mort_species"
"0","  "
"0","  s <- NCRMP_DRM_calculate_mean_colony_size(region = ""SEFCRI"", project = ""NCRMP_DRM"")"
"0","  SEFL_s_spp <- s$Domain_est_species"
"0","  "
"0","  generateCoralPlot(""Southeast Florida"", selected_year, SEFL_weightedmeans, SEFL_om_spp, SEFL_s_spp, SEFL_rm_spp, species_list)"
"0","}"
"0","    "
"0","    "
"0","    else if (selected_region == ""Florida Keys"") {"
"0","      FLK_weightedmeans <- NCRMP_DRM_FLK_Occ_Den_CV"
"0","      #, YEAR == max(NCRMP_DRM_FLK_Occ_Den_CV$YEAR))"
"0","      om <- NCRMP_DRM_calculate_mortality(region = ""FLK"", project = ""NCRMP_DRM"")"
"0","      FLK_om_spp <- om$Domain_est_old_mort_species"
"0","      FLK_rm_spp <- om$Domain_est_rec_mort_species"
"0","      "
"0","      # load species specific size - using max diameter here because DRM doesn't collect what's needed for area or volume"
"0","    "
"0","      s <- NCRMP_DRM_calculate_mean_colony_size(region = ""FLK"", project = ""NCRMP_DRM"")"
"0","      FLK_s_spp <- s$Domain_est_species"
"0","      generateCoralPlot(""Florida Keys"",selected_year, FLK_weightedmeans, FLK_om_spp, FLK_s_spp, FLK_rm_spp, species_list)"
"0","    }"
"0","       "
"0","  "
"0"," "
"0","})"
"0","  "
"0",""
"0",""
"0","output$benthic_plot <- renderPlotly({"
"0","  "
"0","  "
"0","  selected_regions <- input$region"
"0","  # benthics <- input$checkbox"
"0","  # print(benthics)"
"0","    "
"0","  "
"0","  if (is.null(selected_regions)) {"
"0","    return(plot_ly())  "
"0","  }"
"0","  "
"0","  selected_years <- as.character(input$year)"
"0","  "
"0","  plot_list <- list()"
"0","  "
"0","  for (region_name in selected_regions) {"
"0","    region_data <- switch("
"0","      region_name,"
"0","      ""Dry Tortugas"" = NCRMP_Tort_2014_22_cover_region %>% dplyr::mutate(YEAR = ifelse(YEAR == 2020, 2021, as.numeric(YEAR))),"
"0","      ""Southeast Florida"" = NCRMP_SEFCRI_2014_22_cover_region,"
"0","      ""Florida Keys"" = NCRMP_FLK_2014_22_cover_region %>% filter(YEAR != 2020),"
"0","      NULL"
"0","    )"
"0",""
"0","    "
"0","    if (!is.null(region_data)) {"
"0","      plot_list[[region_name]] <- generateRegionPlot(region_data, selected_years, region_name)"
"0","      # plot_list[[region_name]] <- generateRegionPlot(region_data, selected_years, region_name, show_hard_corals, show_macroalgae)"
"0","      # print(c(region_data, selected_years, region_name, show_hard_corals, show_macroalgae))"
"0","    }"
"0","  }"
"0","  "
"0","  final_plot <- subplot(plot_list) %>% layout(title = 'Coral Coverage by Region')"
"0","  return(final_plot)"
"0","})"
"0",""
"0",""
"0","  "
"0","output$map <- renderLeaflet({"
"0","  "
"0","  data <- reactive({"
"0","    if (input$map_region == ""Southeast Florida"") {"
"0","      full_join(NCRMP_SEFCRI_2014_22_density_site, NCRMP_SEFCRI_2014_22_cover_region)"
"0","    } else if (input$map_region == ""Dry Tortugas"") {"
"0","      full_join(NCRMP_Tort_2014_22_density_site, NCRMP_Tort_2014_22_cover_region)"
"0","    } else if (input$map_region == ""Florida Keys"") {"
"0","      full_join(NCRMP_FLK_2014_22_density_site, NCRMP_FLK_2014_22_cover_region)"
"0","    }"
"0","  })"
"0","  "
"0","  "
"0","  "
"0","  filtered_data <- reactive({"
"0","    data() %>%"
"0","      distinct(PRIMARY_SAMPLE_UNIT, .keep_all = TRUE) %>%"
"0","      select(REGION, PRIMARY_SAMPLE_UNIT, YEAR, HABITAT_CD, LAT_DEGREES, LON_DEGREES, DENSITY, avCvr) %>%"
"0","      mutate(across(c(LAT_DEGREES, LON_DEGREES), as.numeric))"
"0","    "
"0","    "
"0","  })"
"0","  "
"0","   leaflet_map <- leaflet(filtered_data()) %>%"
"0","    addProviderTiles(providers$Esri.OceanBasemap) %>%"
"0","    addCircleMarkers("
"0","      lat = ~LAT_DEGREES,"
"0","      lng = ~LON_DEGREES,"
"0","      radius = 5, "
"0","      fillOpacity = 0.8,"
"0","      fillColor = ~colorFactor(as.factor(YEAR), palette = ""Set3""),"
"0","      stroke = FALSE,  "
"0","      popup = ~paste("
"0","        ""Year: "", YEAR, ""<br>"","
"0","        ""Habitat Type: "", HABITAT_CD, ""<br>"","
"0","        ""Total Coral Density: "", DENSITY, ""<br>"","
"0","        ""Total Hard Coral Cover: "", avCvr"
"0","      )"
"0","    ) "
"0",""
"0","  leaflet_map"
"0","})"
"0","}"
"0",""
"0","shinyApp(ui, server)"
"2","
Listening on http://127.0.0.1:4920
"
"2","Warning: Error in filter: [38;5;232m[36mâ„¹[38;5;232m In argument: `cover_group %in% selected_covers & YEAR %in% selected_years`.[39m
[1mCaused by error:[22m
[33m![39m argument ""selected_covers"" is missing, with no default"
"2","  119: [37m<Anonymous>[39m
"
"2",""
"2","  118: [37msignalCondition[39m
"
"2",""
"2","  117: [37msignal_abort[39m
"
"2",""
"2","  116: [37mabort[39m
"
"2",""
"2","  115: [37mh[39m
"
"2",""
"2","  114: [37m.handleSimpleError[39m
"
"2",""
"2","  113: [37m%in%[39m
"
"2",""
"2","  112: [37meval[39m
"
"2",""
"2","  111: [37mmask$eval_all_filter[39m
"
"2",""
"2","  109: [37mfilter_eval[39m
"
"2",""
"2","  108: [37mfilter_rows[39m
"
"2",""
"2","  107: [37mfilter.data.frame[39m
"
"2",""
"2","  106: [37mfilter[39m
"
"2",""
"2","  105: [37m%>%[39m
"
"2",""
"2","  104: [34m[1mgenerateRegionPlot [/Users/juliamateski/Shiny/Cover.R#14][22m[39m
"
"2",""
"2","  103: [34m[1mrenderPlotly [#88][22m[39m
"
"2",""
"2","  102: [37mfunc[39m
"
"2",""
"2","   99: [37mshinyRenderWidget[39m
"
"2",""
"2","   98: [37mfunc[39m
"
"2",""
"2","   85: [37mrenderFunc[39m
"
"2",""
"2","   84: [37moutput$benthic_plot[39m
"
"2",""
"2","    3: [37mrunApp[39m
"
"2",""
"2","    2: [37mprint.shiny.appobj[39m
"
"2",""
"2","    1: [37m<Anonymous>[39m
"
"2","Input to asJSON(keep_vec_names=TRUE) is a named vector. In a future version of jsonlite, this option will not be supported, and named vectors will be translated into arrays instead of objects. If you want JSON object output, please use a named list instead. See ?toJSON.
"
"2","Joining with `by = join_by(REGION, YEAR)`"
"2","Warning: Detected an unexpected many-to-many relationship between `x` and `y`."
